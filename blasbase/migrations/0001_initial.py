# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-09 23:46
from __future__ import unicode_literals

import blasbase.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import imagekit.models.fields
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlasUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Används för att avgöra ifall användaren kan logga in eller inte. Detta är INTE ett fält för att markera att någon blivit gamling', verbose_name='is active')),
                ('is_staff', models.BooleanField(default=False, help_text='Bestämmer om användaren kan logga in i admingränssnittet', verbose_name='is staff')),
                ('extra_name', models.CharField(default='', max_length=64)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['email'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=256, verbose_name='address')),
                ('post_code', models.CharField(blank=True, max_length=256, verbose_name='post code')),
                ('city', models.CharField(blank=True, max_length=256, verbose_name='city')),
                ('country', django_countries.fields.CountryField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(blank=True, help_text='First date of assignment.', null=True, verbose_name='start')),
                ('end', models.DateField(blank=True, help_text='Last date of assignment.', null=True, verbose_name='end')),
                ('trial', models.BooleanField(default=False, verbose_name='trial')),
            ],
            options={
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='Function',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('membership', models.BooleanField(default=False, verbose_name='membership')),
                ('engagement', models.BooleanField(default=False, verbose_name='engagement')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='blasbase.Function', verbose_name='parent')),
                ('permissions', models.ManyToManyField(blank=True, related_name='functions', to='auth.Permission', verbose_name='permissions')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=256, verbose_name='first name')),
                ('nickname', models.CharField(blank=True, max_length=256, verbose_name='nickname')),
                ('last_name', models.CharField(max_length=256, verbose_name='last name')),
                ('born', models.DateField(blank=True, null=True, validators=[blasbase.validators.date_before_today], verbose_name='born')),
                ('deceased', models.DateField(blank=True, null=True, validators=[blasbase.validators.date_before_today], verbose_name='deceased')),
                ('personal_id_num_suffix', models.CharField(blank=True, max_length=4, verbose_name='last 4 charactes of personal identification number')),
                ('liu_id', models.CharField(blank=True, max_length=8, verbose_name='LiU-ID')),
                ('about', models.TextField(blank=True, verbose_name='about')),
                ('special_diets_extra', models.CharField(blank=True, max_length=256, verbose_name='special diets comments')),
                ('avatar', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='avatars')),
                ('email', models.EmailField(max_length=256, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('functions', models.ManyToManyField(through='blasbase.Assignment', to='blasbase.Function', verbose_name='functions')),
            ],
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=64)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phone_numbers', to='blasbase.Person')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialDiet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='person',
            name='special_diets',
            field=models.ManyToManyField(blank=True, related_name='people', to='blasbase.SpecialDiet', verbose_name='special diets'),
        ),
        migrations.AddField(
            model_name='person',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='person', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assignment',
            name='function',
            field=mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blasbase.Function', verbose_name='function'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='blasbase.Person', verbose_name='person'),
        ),
        migrations.AddField(
            model_name='address',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='blasbase.Person'),
        ),
        migrations.AlterUniqueTogether(
            name='function',
            unique_together=set([('parent', 'name')]),
        ),
    ]
